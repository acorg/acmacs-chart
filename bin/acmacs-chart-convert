#! /usr/bin/env python3
# -*- Python -*-

"""
"""

import sys, os, traceback, pprint
if sys.version_info.major != 3: raise RuntimeError("Run script with python3")
from pathlib import Path
sys.path[:0] = [str(Path(os.environ["ACMACSD_ROOT"]).resolve().joinpath("py"))]
import logging; module_logger = logging.getLogger(__name__)

import acmacs_chart
from acmacs_base.timeit import timeit

# ----------------------------------------------------------------------

def main(args):
    with timeit("Reading chart from " + args.input[0]):
        chart = acmacs_chart.import_chart(args.input[0])
    if args.output[0][-4:] == ".ace":
        exporter = acmacs_chart.export_chart
    elif args.output[0][-5:] == ".save" or args.output[0][-8:] == ".save.xz":
        exporter = acmacs_chart.export_chart_lispmds
    else:
        raise CommandLineError("Unrecognized output format")
    with timeit("Writing chart to " + args.output[0]):
        exporter(filename=args.output[0], chart=chart)

# ----------------------------------------------------------------------

class CommandLineError (Exception): pass

try:
    import argparse
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('-d', '--debug', action='store_const', dest='loglevel', const=logging.DEBUG, default=logging.INFO, help='Enable debugging output.')

    parser.add_argument('input', nargs=1, help='Input chart file (ace).')
    parser.add_argument('output', nargs=1, help='Output chart file.')

    args = parser.parse_args()
    logging.basicConfig(level=args.loglevel, format="%(levelname)s %(asctime)s: %(message)s")
    exit_code = main(args)
except CommandLineError as err:
    logging.error(str(err))
    exit_code = 1
except Exception as err:
    logging.error(err, exc_info=True)
    exit_code = 1
exit(exit_code)

# ======================================================================
### Local Variables:
### eval: (if (fboundp 'eu-rename-buffer) (eu-rename-buffer))
### End:
