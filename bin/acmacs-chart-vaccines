#! /usr/bin/env python3
# -*- Python -*-

"""
"""

import sys, os, traceback, pprint
if sys.version_info.major != 3: raise RuntimeError("Run script with python3")
from pathlib import Path
sys.path[:0] = [str(Path(os.environ["ACMACSD_ROOT"]).resolve().joinpath("py"))]
import logging; module_logger = logging.getLogger(__name__)

import acmacs_chart
from acmacs_base.timeit import timeit

# ----------------------------------------------------------------------

sVaccines = {
    "A(H1N1)": [
        {"name": "CALIFORNIA/7/2009", "type": "current"},
        ],
    "A(H3N2)": [
        {"name": "BRISBANE/10/2007",         "type": "previous"},
        {"name": "PERTH/16/2009",            "type": "previous"},
        {"name": "VICTORIA/361/2011",        "type": "previous"},
        {"name": "TEXAS/50/2012",            "type": "previous"},
        {"name": "SWITZERLAND/9715293/2013", "type": "previous"},
        {"name": "HONG KONG/4801/2014",      "type": "current"},
        {"name": "SAITAMA/103/2014",         "type": "surrogate"},
        {"name": "HONG KONG/7295/2014",      "type": "surrogate"},
        ],
    "B/VICTORIA": [
        {"name": "MALAYSIA/2506/2004",      "type": "previous"},
        {"name": "BRISBANE/60/2008",        "type": "current"},
        {"name": "PARIS/1762/2009",         "type": "current"},
        {"name": "SOUTH AUSTRALIA/81/2012", "type": "surrogate"},
        ],
    "B/YAMAGATA": [
        {"name": "FLORIDA/4/2006",       "type": "previous"},
        {"name": "WISCONSIN/1/2010",     "type": "previous"},
        {"name": "MASSACHUSETTS/2/2012", "type": "previous"},
        {"name": "PHUKET/3073/2013",     "type": "current"},
        ],
    }

# ----------------------------------------------------------------------

def main(args):
    with timeit("Reading chart from " + args.chart[0]):
        chart = acmacs_chart.import_chart(args.chart[0])
    virus_type = chart.chart_info().virus_type()
    lineage = chart.lineage()
    print(virus_type, lineage)
    hidb_set = acmacs_chart.HiDbSet(str(Path("~/AD/data").expanduser().resolve()))
    hidb = hidb_set.get(virus_type)
    if lineage:
        virus_type += "/" + lineage
    for entry in sVaccines[virus_type]:
        vv = chart.vaccines(entry["name"], hidb)
        print(vv)

# ----------------------------------------------------------------------

try:
    import argparse
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('-d', '--debug', action='store_const', dest='loglevel', const=logging.DEBUG, default=logging.INFO, help='Enable debugging output.')

    parser.add_argument('chart', nargs=1, help='Chart file.')

    args = parser.parse_args()
    logging.basicConfig(level=args.loglevel, format="%(levelname)s %(asctime)s: %(message)s")
    exit_code = main(args)
except Exception as err:
    logging.error('{}\n{}'.format(err, traceback.format_exc()))
    exit_code = 1
exit(exit_code)

# ======================================================================
### Local Variables:
### eval: (if (fboundp 'eu-rename-buffer) (eu-rename-buffer))
### End:
