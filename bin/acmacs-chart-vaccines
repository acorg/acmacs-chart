#! /usr/bin/env python3
# -*- Python -*-

"""
"""

import sys, os, traceback, pprint
if sys.version_info.major != 3: raise RuntimeError("Run script with python3")
from pathlib import Path
sys.path[:0] = [str(Path(os.environ["ACMACSD_ROOT"]).resolve().joinpath("py"))]
import logging; module_logger = logging.getLogger(__name__)

import acmacs_chart
from acmacs_base.timeit import timeit

# ----------------------------------------------------------------------

def main(args):
    with timeit("Reading chart from " + args.chart[0]):
        chart = acmacs_chart.import_chart(args.chart[0])
    virus_type = chart.chart_info().virus_type()
    lineage = chart.lineage()
    print(virus_type, lineage)
    hidb = acmacs_chart.get_hidb(virus_type, args.hidb_dir)
    if lineage:
        virus_type += "/" + lineage
    for entry in acmacs_chart.vaccines(virus_type):
        present = False
        vv = chart.vaccines(entry["name"], hidb)
        for e, name in [[vv.egg(), "EGG:"], [vv.cell(), "CELL:"], [vv.reassortant(), "REASSORTANT:"]]:
            if e:
                present = True
                print(name, e.antigen.full_name())
                for es in e.homologous_sera:
                    print("  ", es.serum.full_name(), " tables:", es.number_of_tables(), " most-recent:", es.most_recent_table, " species:", es.serum.serum_species(), sep="")
        if present:
            print()
            print(vv.report())
            print()

# ----------------------------------------------------------------------

try:
    import argparse
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('-d', '--debug', action='store_const', dest='loglevel', const=logging.DEBUG, default=logging.INFO, help='Enable debugging output.')

    parser.add_argument('--hidb-dir', action='store', dest='hidb_dir', default="~/AD/data", help='Directory with hidb4.*.json.xz.')

    parser.add_argument('chart', nargs=1, help='Chart file.')

    args = parser.parse_args()
    logging.basicConfig(level=args.loglevel, format="%(levelname)s %(asctime)s: %(message)s")
    exit_code = main(args)
except Exception as err:
    logging.error('{}\n{}'.format(err, traceback.format_exc()))
    exit_code = 1
exit(exit_code)

# ======================================================================
### Local Variables:
### eval: (if (fboundp 'eu-rename-buffer) (eu-rename-buffer))
### End:
