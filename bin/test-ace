#! /usr/bin/env python3
# -*- Python -*-

"""
Read chart from ace, read ace as json, compare them.
"""

import sys, os, traceback
if sys.version_info.major != 3: raise RuntimeError("Run script with python3")
from pathlib import Path
sys.path[:0] = [str(Path(os.environ["ACMACSD_ROOT"]).resolve().joinpath("py"))]
import logging; module_logger = logging.getLogger(__name__)

import acmacs_chart
from acmacs_base.timeit import timeit
from acmacs_base.files import read_json

# ----------------------------------------------------------------------

def main(args):
    with timeit("Reading chart from " + args.input[0]):
        chart = acmacs_chart.import_chart(args.input[0])
    with timeit("Reading json from " + args.input[0]):
        chart_raw = read_json(args.input[0])

    for field_raw, field in [["N", "name"], ["D", "date"], ["L", "lineage"], ["P", "passage"], ["R", "reassortant"]]:
        #module_logger.debug('Testing antigens: {!r} -- {!r}'.format(field_raw, field))
        antigen_fields_raw = [antigen.get(field_raw, "") for antigen in chart_raw["c"]["a"]]
        antigen_fields = [getattr(chart.antigen(ag_no), field)() for ag_no in range(chart.number_of_antigens())]
        assert len(antigen_fields_raw) == chart.number_of_antigens(), "antigens size of {!r} -- {!r}".format(field_raw, field)
        assert antigen_fields_raw == antigen_fields, "antigens: {!r} -- {!r}".format(field_raw, field)

    for field_raw, field in [["N", "name"], ["L", "lineage"], ["P", "passage"], ["R", "reassortant"], ["I", "serum_id"]]:
        #module_logger.debug('Testing sera: {!r} -- {!r}'.format(field_raw, field))
        serum_fields_raw = [serum.get(field_raw, "") for serum in chart_raw["c"]["s"]]
        serum_fields = [getattr(chart.serum(sr_no), field)() for sr_no in range(chart.number_of_sera())]
        assert len(serum_fields_raw) == chart.number_of_sera(), "sera size of {!r} -- {!r}".format(field_raw, field)
        assert serum_fields_raw == serum_fields, "sera: {!r} -- {!r}".format(field_raw, field)

    assert len(chart_raw["c"].get("P", [])) == chart.number_of_projections()

# ----------------------------------------------------------------------

try:
    import argparse
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('-d', '--debug', action='store_const', dest='loglevel', const=logging.DEBUG, default=logging.INFO, help='Enable debugging output.')

    parser.add_argument('input', nargs=1, help='Chart input file.')

    args = parser.parse_args()
    logging.basicConfig(level=args.loglevel, format="%(levelname)s %(asctime)s: %(message)s")
    exit_code = main(args)
except Exception as err:
    logging.error('{}\n{}'.format(err, traceback.format_exc()))
    exit_code = 1
exit(exit_code)

# ======================================================================
### Local Variables:
### eval: (if (fboundp 'eu-rename-buffer) (eu-rename-buffer))
### End:
